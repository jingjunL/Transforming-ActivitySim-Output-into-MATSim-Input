#Step 1.5.A: check whether most agents plan generated by ActivitySim is realistic

#3 requirements:
# for each person_id, whether the depart of the next trip is bigger or equal to its previous trip,
# whether the origin of the next trip is equal to its previous trip,
# plus whether the last trip of each person the purpose is always "Home"

#advice to run also fixDepartHourMistake.py

import pandas as pd

# Load the dataset
file_path = r'C:\Users\jingjunli\OneDrive - Delft University of Technology\Documents\matsim\activitySimData\output\processedMRDH50PercTrips.csv'
#file_path = r'C:\Users\jingjunli\OneDrive - Delft University of Technology\Documents\matsim\activitySimData\output\bugExample.csv'

data = pd.read_csv(file_path)

# Initialize validation results
errors = {
    "depart_time": [],
    "origin_destination": [],
    "last_trip_home": []
}

# Check each person's trips
for person_id, group in data.groupby('person_id', sort=False):  # Keep original order
    group = group.reset_index()

    # Check depart time sequence and origin-destination match
    for i in range(len(group) - 1):
        if group.loc[i + 1, 'depart'] < group.loc[i, 'depart']:
            errors["depart_time"].append((person_id, group.loc[i, 'trip_id'], group.loc[i + 1, 'trip_id']))

        if group.loc[i + 1, 'origin'] != group.loc[i, 'destination']:
            errors["origin_destination"].append((person_id, group.loc[i, 'trip_id'], group.loc[i + 1, 'trip_id']))

    # Check if the last trip purpose is "Home"
    if group.iloc[-1]['purpose'] != "Home":
        errors["last_trip_home"].append(person_id)

# Print validation results
print("Depart Time Errors (person_id, trip_id_prev, trip_id_next):", errors["depart_time"])
print("Origin-Destination Mismatch (person_id, trip_id_prev, trip_id_next):", errors["origin_destination"])
print("Last Trip Not Home (person_id):", errors["last_trip_home"])
